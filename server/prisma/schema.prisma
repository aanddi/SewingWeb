generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//------------- Первичный пользователь -------------
model User {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  password   String
  name       String
  surname    String
  patronymic String?
  email      String?  @unique()
  phone      String   @unique()

  roleId Int  @map("role_id")
  role   Role @relation(fields: [roleId], references: [id])

  jobSeeker JobSeeker?

  employer Employer?

  @@map("Users")
}

// ЛОГИКА СВЯЗИ: одной роли может принадлежать несколько пользователей(один ко многим), пока хз, может быть один к одному
model Role {
  id   Int    @id @default(autoincrement()) @map("role_id")
  name String @map("role_name")

  user User[]

  @@map("Roles")
}

//------------- Соискатели и резюме -------------
// ЛОГИКА СВЯЗИ: один пользователь может указать несколько образований(один ко многим)
// ЛОГИКА СВЯЗИ С РЕЗЮМЕ: один пользователь может создать одно резюме(один к одному)
// ЛОГИКА СВЯЗИ С ОПЫТОМ РАБОТЫ: один соискатель, может добавить несколько опытов работы(многие к одному)
model JobSeeker {
  id Int @id @default(autoincrement()) @map("jobseeker_id")

  userId Int  @unique @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  resume   Resume @relation(fields: [resumeId], references: [id])
  resumeId Int    @unique @map("resume_id")

  vacancy Vacancy[] // избранные вакансии, которые добавлены соискателями

  @@map("JobSeekers")
}

model InstitutionalInfo {
  id              Int     @id @default(autoincrement()) @map("institutional_information_id")
  educationLevel  String  @map("educational_level")
  institutionName String? @map("name_of_institution")
  faculty         String?
  specialization  String?

  resumeId Int    @map("resume_id")
  resume   Resume @relation(fields: [resumeId], references: [id])

  @@map("Institutional_informations")
}

model WorkExperience {
  id         Int       @id @default(autoincrement()) @map("work_experience_id")
  city       String
  company    String
  post       String
  startTime  DateTime? @map("start_time")
  endTime    DateTime? @map("end_time")
  experience String?

  resumeId Int    @map("resume_id")
  resume   Resume @relation(fields: [resumeId], references: [id])

  @@map("Work_experiences")
}

// ЛОГИКА СВЯЗИ С ПРОФЕССИЯМИ: одно резюме может быть создано на одну профессию(один ко многим, так как не может быть уникальным)
// ЛОГИКА СВЯЗИ С РАБОТОДАТЕЛЯМИ(ИЗБРАННЫЕ РЕЗЮМЕ): работодателю может понравиться разные резюме, одно резюме может понравиться разным соискателям(многие ко многим, пока не явно)
model Resume {
  id            Int       @id @default(autoincrement()) @map("resume_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")
  name          String
  surname       String
  patronymic    String?
  profession    String?
  salary        Int?
  gender        String?
  DOB           String?
  phoneNumber   String?   @map("phone_number")
  citizenship   String?
  city          String?
  email         String?
  languages     String?
  workTimetable String?

  about      String?
  work_exp   WorkExperience[]
  eductional InstitutionalInfo[]

  jobseeker JobSeeker?
  vacancy   Responses[]
  employer  Employer[] // избранные резюме, работодатели, которые добавили резюме в избранное

  @@map("Resumes")
}

//------------- Работодатели и вакансии -------------
// ЛОГИКА СВЯЗИ: однин работодатель может добавить одно контактное лицо(один к одному)
model Employer {
  id          Int     @id @default(autoincrement()) @map("employer_id")
  companyName String  @map("company_name")
  inn         String  @unique() @map("INN")
  type        String
  registrCity String? @map("city_of_registration")
  about       String?
  size        Int
  contact     String
  adress      String?

  userId Int  @unique @map("userId")
  user   User @relation(fields: [userId], references: [id])

  vacansy Vacancy[]

  resume Resume[] // избранные резюме, которые добавлены работодателями

  @@map("Employers")
}

// ЛОГИКА СВЯЗИ С РАБОТОДАТЕЛЯМИ: один работодатель может создать несколько вакансий(один ко многим)
// ЛОГИКА СВЯЗИ С ПРОФЕССИЯМИ: одна профессия может быть у множества вакансий, при этом одна вакансия, может быть создана только на одну профессию(один ко многим, не может быть уникальным, так как разные вакансии, но профессии могут повторяться)
// ЛОГИКА СВЯЗИ С СОИСКАТЕЛЯМИ(ИЗБРАННЫЕ ВАКАНСИИ): одному соискателю может понравиться разные вакансии, одна вакансия может понравиться разным соискателям(многие ко многим, пока не явно)
model Vacancy {
  id             Int       @id @default(autoincrement()) @map("vacancy_id")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime? @updatedAt @map("updated_at")
  title          String
  salary         Int
  desc           String
  skills         String
  address        String
  workExperience String    @map("work_experience")
  employment     String    @map("employment_type")
  workTimetable  String    @map("work_timetable")
  education      String    @map("education_info")

  employerId Int      @map("employer_id")
  employer   Employer @relation(fields: [employerId], references: [id])

  professionId Int        @map("profession_id")
  profession   Profession @relation(fields: [professionId], references: [id])

  jobSeeker JobSeeker[] // избранные вакансии, соискатели, которые доавлили вакансии

  resume Responses[]

  // date_start      String // для подписки, мб надо мб нет, хз пока как сделать
  // date_end        String

  @@map("Vacansies")
}

// явный тип связи многие ко многим(по идее не нужен, но пусть пока будет)
// Отличие явного и неявного отношений связи много ко многим в том, что при не явном отношение в бд создаётся своя таблица отношений с именовамы по своему полями. При явном определении, поля задаются самостоятельно и их можно настроить, также, можно добавить дополнительные поля к таблице отношений, при не явном нельзя. 
// Но преимущество неявного способа в том, что при запросе меньше вложенности. В общем отличие только в отображении отношения в БД
// model FavoriteVacansy {
//   jobseekerId Int
//   jobSeeker   JobSeeker @relation(fields: [jobseekerId], references: [id])
//   vacancyId   Int
//   vacancy     Vacancy   @relation(fields: [vacancyId], references: [id])

//   @@id([jobseekerId, vacancyId]) // они не уникальны, поэтому @@id, а не @@unique
//   @@map("Favorite_vacansies")
// }

//------------- Профессии и отклики -------------
model Profession {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")
  name          String    @unique
  averageSalary Int       @map("average_salary")
  desc          String

  vacancy Vacancy[]

  @@map("Professions")
}

// ЛОГИКА СВЯЗИ: на одну вакансию может откликнуться несколько соискателей, нескольким соискателям может понравиться одна вакансия(многие ко многим). Определили явно, так как есть дополнительное поле id(нужно оно или нет, пока хз)
model Responses {
  id       Int @id @default(autoincrement()) @map("response_id")
  resumeId Int @map("resume_id")

  resume Resume @relation(fields: [resumeId], references: [id])

  vacancyId Int     @map("vacancy_id")
  vacancy   Vacancy @relation(fields: [vacancyId], references: [id])
}
