generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



//------------- Первичный пользователь -------------
model User {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  password   String
  name       String
  surname    String
  patronymic String?
  email      String?  @unique()
  phone      String   @unique()

  roleId Int  @map("role_id")
  role   Role @relation(fields: [roleId], references: [id])

  jobSeeker JobSeeker?

  employer  Employer?
  Favorites Favorites[]

  @@map("users")
}

// ЛОГИКА СВЯЗИ: одной роли может принадлежать несколько пользователей(один ко многим), пока хз, может быть один к одному
model Role {
  id   Int    @id @default(autoincrement()) @map("role_id")
  name String @map("role_name")

  user User[]

  @@map("roles")
}

//------------- Соискатели и резюме -------------
// ЛОГИКА СВЯЗИ: один пользователь может указать несколько образований(один ко многим)
// ЛОГИКА СВЯЗИ С РЕЗЮМЕ: один пользователь может создать одно резюме(один к одному)
// ЛОГИКА СВЯЗИ С ОПЫТОМ РАБОТЫ: один соискатель, может добавить несколько опытов работы(многие к одному)
model JobSeeker {
  id Int @id @default(autoincrement()) @map("jobseeker_id")

  userId Int  @unique @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  resume   Resume @relation(fields: [resumeId], references: [id])
  resumeId Int    @unique @map("resume_id")

  vacancy   Vacancy[] // избранные вакансии, которые добавлены соискателями
  responses Responses[]
  Reviews   Reviews[]

  @@map("jobseekers")
}

model Education {
  id              Int    @id @default(autoincrement()) @map("education_id")
  educationLevel  String @map("educational_level")
  institutionName String @map("name_of_institution")
  specialization  String
  yearEnding      String @map("year_of_ending")

  resumeId Int    @map("resume_id")
  resume   Resume @relation(fields: [resumeId], references: [id])

  @@map("resume_education")
}

model WorkExperience {
  id         Int      @id @default(autoincrement()) @map("work_experience_id")
  city       String
  company    String
  post       String
  startTime  String   @map("start_time")
  untilNow   Boolean? @map("until_now")
  endTime    String?  @map("end_time")
  experience String?

  resumeId Int    @map("resume_id")
  resume   Resume @relation(fields: [resumeId], references: [id])

  @@map("resume_experience")
}

// ЛОГИКА СВЯЗИ С ПРОФЕССИЯМИ: одно резюме может быть создано на одну профессию(один ко многим, так как не может быть уникальным)
// ЛОГИКА СВЯЗИ С РАБОТОДАТЕЛЯМИ(ИЗБРАННЫЕ РЕЗЮМЕ): работодателю может понравиться разные резюме, одно резюме может понравиться разным соискателям(многие ко многим, пока не явно)
model Resume {
  id            Int       @id @default(autoincrement()) @map("resume_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")
  name          String
  surname       String
  patronymic    String?
  profession    String?
  salary        Int?
  gender        String?
  DOB           String?
  phoneNumber   String?   @map("phone_number")
  citizenship   String?
  city          String?
  email         String?
  languages     String?
  workTimetable String?

  about           String?
  work_experience WorkExperience[]
  eductional      Education[]

  jobseeker JobSeeker?
  employer  Employer[] // избранные резюме, работодатели, которые добавили резюме в избранное

  @@map("resumes")
}

//------------- Работодатели и вакансии -------------
// ЛОГИКА СВЯЗИ: однин работодатель может добавить одно контактное лицо(один к одному)
model Employer {
  id          Int     @id @default(autoincrement()) @map("employer_id")
  companyName String  @map("company_name")
  inn         String  @unique() @map("INN")
  type        String
  registrCity String? @map("city_of_registration")
  about       String?
  size        Int
  contact     String
  adress      String?

  userId Int  @unique @map("userId")
  user   User @relation(fields: [userId], references: [id])

  vacansy Vacancy[]

  resume  Resume[] // избранные резюме, которые добавлены работодателями
  Reviews Reviews[]

  @@map("employers")
}

// ЛОГИКА СВЯЗИ С РАБОТОДАТЕЛЯМИ: один работодатель может создать несколько вакансий(один ко многим)
// ЛОГИКА СВЯЗИ С ПРОФЕССИЯМИ: одна профессия может быть у множества вакансий, при этом одна вакансия, может быть создана только на одну профессию(один ко многим, не может быть уникальным, так как разные вакансии, но профессии могут повторяться)
// ЛОГИКА СВЯЗИ С СОИСКАТЕЛЯМИ(ИЗБРАННЫЕ ВАКАНСИИ): одному соискателю может понравиться разные вакансии, одна вакансия может понравиться разным соискателям(многие ко многим, пока не явно)
model Vacancy {
  id             Int       @id @default(autoincrement()) @map("vacancy_id")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime? @updatedAt @map("updated_at")
  title          String
  minSalary      Int?      @map("min_salary")
  maxSalary      Int?      @map("max_salary")
  descCard       String    @map("desc_card")
  descMain       String    @map("desc_main")
  city           String
  adress         String
  skills         String?
  workExperience String    @map("work_experience")
  workTimetable  String    @map("work_timetable")
  employmentType String    @map("employment_type")
  education      String    @map("education_info")
  tags           String
  fullName       String    @map("full_name")
  phoneNumber    String    @map("phone_number")
  contact        String?
  status         Boolean
  dateStart      DateTime  @map("date_start")
  dateEnd        DateTime  @map("date_end")

  employerId Int      @map("employer_id")
  employer   Employer @relation(fields: [employerId], references: [id])

  professionId Int        @map("profession_id")
  profession   Profession @relation(fields: [professionId], references: [id])

  tarifId Int          @map("tarif_id")
  tarif   VacancyTarif @relation(fields: [tarifId], references: [id])

  jobSeeker JobSeeker[] // избранные вакансии, соискатели, которые доавлили вакансии

  resume    Responses[]
  Favorites Favorites[]

  @@map("vacansies")
}

model VacancyTarif {
  id     Int     @id @default(autoincrement()) @map("tarif_id")
  name   String
  salary Int
  time   Int
  desc   String? @map("description")

  vacancy Vacancy[]

  @@map("tarif_vacancy")
}

// явный тип связи многие ко многим(по идее не нужен, но пусть пока будет)
// Отличие явного и неявного отношений связи много ко многим в том, что при не явном отношение в бд создаётся своя таблица отношений с именовамы по своему полями. При явном определении, поля задаются самостоятельно и их можно настроить, также, можно добавить дополнительные поля к таблице отношений, при не явном нельзя. 
// Но преимущество неявного способа в том, что при запросе меньше вложенности. В общем отличие только в отображении отношения в БД
// model FavoriteVacansy {
//   jobseekerId Int
//   jobSeeker   JobSeeker @relation(fields: [jobseekerId], references: [id])
//   vacancyId   Int
//   vacancy     Vacancy   @relation(fields: [vacancyId], references: [id])

//   @@id([jobseekerId, vacancyId]) // они не уникальны, поэтому @@id, а не @@unique
//   @@map("Favorite_vacansies")
// }

//------------- Профессии и отклики -------------
model Profession {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")
  name          String    @unique
  averageSalary Int       @map("average_salary")
  desc          String

  vacancy Vacancy[]

  @@map("professions")
}

// ЛОГИКА СВЯЗИ: на одну вакансию может откликнуться несколько соискателей, нескольким соискателям может понравиться одна вакансия(многие ко многим). Определили явно, так как есть дополнительное поле id(нужно оно или нет, пока хз)
model Responses {
  id          Int      @id @default(autoincrement()) @map("response_id")
  createdAt   DateTime @default(now()) @map("created_at")
  jobseekerId Int      @map("jobseeker_id")
  vacancyId   Int      @map("vacancy_id")
  status      String

  jobseeker JobSeeker @relation(fields: [jobseekerId], references: [id])
  vacancy   Vacancy   @relation(fields: [vacancyId], references: [id])

  @@map("responses")
}

model Favorites {
  id        Int @id @default(autoincrement()) @map("favorite_id")
  userId    Int @map("user_id")
  vacancyId Int @map("vacancy_id")

  user    User    @relation(fields: [userId], references: [id])
  vacancy Vacancy @relation(fields: [vacancyId], references: [id])

  @@map("vacancy_favorites")
}

model Reviews {
  id          Int       @id @default(autoincrement()) @map("review_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  employerId  Int       @map("employer_id")
  jobseekerId Int       @map("jobseeker_id")
  profession  String
  post        String
  grade       Int
  advantages  String?
  flaws       String?
  comment     String?

  employer  Employer  @relation(fields: [employerId], references: [id])
  jobseeker JobSeeker @relation(fields: [jobseekerId], references: [id])

  @@map("employer_reviews")
}
