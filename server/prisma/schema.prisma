generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}




//------------- Первичный пользователь -------------
// пока не трогаю, хз чё там у тебя с логином
model User {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  password   String
  name       String
  surname    String
  patronymic String?
  email      String?  @unique()
  phone      String   @unique()

  @@map("Users")
}

// ЛОГИКА СВЯЗИ: одной роли может принадлежать несколько пользователей(один ко многим), пока хз, может быть один к одному
model Role {
  id   Int    @id @default(autoincrement()) @map("role_id")
  name String @map("role_name")
  // user User[]

  @@map("Roles")
}

// но правильно будет вот так
// model User {
//   id         Int      @id @default(autoincrement()) @map("user_id")
//   createdAt  DateTime @default(now()) @map("created_at")
//   updatedAt  DateTime @updatedAt @map("updated_at")
//   phoneLogin String   @unique() @map("login")
//   password   String   @unique()
//   email      String?  @unique()
//   role       Role     @relation(fields: [roleId], references: [id])
//   roleId     Int

//   @@map("Users")
// }




//------------- Соискатели и резюме -------------
// ЛОГИКА СВЯЗИ: один пользователь может указать несколько образований(один ко многим)
// ЛОГИКА СВЯЗИ С РЕЗЮМЕ: один пользователь может создать несколько резюме(один ко многим)
model JobSeeker {
  id                Int                 @id @default(autoincrement()) @map("job_seeker_id")
  name              String?
  surname           String?
  patronymic        String?
  sex               String?
  DOB               DateTime?
  city              String?
  citizenship       String?
  languages         String?

  institutionalInfo InstitutionalInfo[]

  resume            Resume[]

  vacancy           Vacancy[] // избранные вакансии, которые добавлены соискателями

  @@map("Job_seekers")
}

model InstitutionalInfo {
  id              Int       @id @default(autoincrement()) @map("institutional_information_id")
  educationLevel  String    @map("educational_level")
  institutionName String?   @map("name_of_institution")
  faculty         String?
  specialization  String?

  jobseekerId     Int
  jobSeeker       JobSeeker @relation(fields: [jobseekerId], references: [id])
}

// ЛОГИКА СВЯЗИ С ПРОФЕССИЯМИ: одно резюме может быть создано на одну профессию(один к одному)
// ЛОГИКА СВЯЗИ С ОПЫТОМ РАБОТЫ: одно резюме может включать несколько опытов работы(многие к одному)
// ЛОГИКА СВЯЗИ С РАБОТОДАТЕЛЯМИ(ИЗБРАННЫЕ РЕЗЮМЕ): работодателю может понравиться разные резюме, одно резюме может понравиться разным соискателям(многие ко многим, пока не явно)
model Resume {
  id             Int              @id @default(autoincrement()) @map("resume_id")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime?        @updatedAt @map("updated_at")
  name           String
  surname        String
  DOB            DateTime
  sex            String
  citizenship    String
  city           String
  phone_number   String
  email          String
  salary         String
  workTimetable  String?
  skills         String
  languages      String
  about          String?

  jobseekerId    Int
  jobseeker      JobSeeker        @relation(fields: [jobseekerId], references: [id])

  vacancy        Responses[]

  professionId   Int              @unique
  profession     Profession       @relation(fields: [professionId], references: [id])

  workExperience WorkExperience[]

  employer       Employer[] // избранные резюме, работодатели, которые добавили резюме в избранное

  @@map("Resumes")
}

model WorkExperience {
  id         Int       @id @default(autoincrement()) @map("work_experience_id")
  city       String
  company    String
  post       String
  startTime  DateTime? @map("start_time")
  endTime    DateTime? @map("end_time")
  experience String?

  resumeId   Int
  resume     Resume    @relation(fields: [resumeId], references: [id])

  @@map("Work_experiences")
}




//------------- Работодатели и вакансии -------------
// ЛОГИКА СВЯЗИ: однин работодатель может добавить одно контактное лицо(один к одному)
model Employer {
  id               Int            @id @default(autoincrement()) @map("employer_id")
  companyName      String         @map("company_name")
  inn              Int            @map("INN")
  type             String
  registrCity      String         @map("city_of_registration")
  about            String
  
  contactPersoneId Int            @unique
  contactPersone   ContactPersone @relation(fields: [contactPersoneId], references: [id])

  vacansy          Vacancy[]

  resume           Resume[] // избранные резюме, которые добавлены работодателями

  @@map("Employers")
}

model ContactPersone {
  id       Int       @id @default(autoincrement()) @map("persone_id")
  name     String
  surname  String
  post     String

  employer Employer?

  @@map("Contact_persones")
}

// ЛОГИКА СВЯЗИ С РАБОТОДАТЕЛЯМИ: один работодатель может создать несколько вакансий(один ко многим)
// ЛОГИКА СВЯЗИ С ПРОФЕССИЯМИ: одна вакансия может быть создана только на одноу профессию(один к одному)
// ЛОГИКА СВЯЗИ С СОИСКАТЕЛЯМИ(ИЗБРАННЫЕ ВАКАНСИИ): одному соискателю может понравиться разные вакансии, одна вакансия может понравиться разным соискателям(многие ко многим, пока не явно)
model Vacancy {
  id             Int         @id @default(autoincrement()) @map("vacancy_id")
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime?   @updatedAt @map("updated_at")
  title          String
  salary         Int
  desc           String
  address        String
  workExperience String      @map("work_experience")
  employment     String      @map("employment_type")
  wokrTimetable  String      @map("work_timetable")
  education      String      @map("education_info")

  employerId     Int         @unique
  employer       Employer    @relation(fields: [employerId], references: [id])

  professionId   Int         @unique
  profession     Profession  @relation(fields: [professionId], references: [id])

  jobSeeker      JobSeeker[] // избранные вакансии, соискатели, которые доавлили вакансии

  resume         Responses[]

  date_start     String // для подписки, мб надо мб нет, хз пока как сделать
  date_end       String

  @@map("Vacansies")
}

// явный тип связи многие ко многим(по идее не нужен, но пусть пока будет)
// model FavoriteVacansy {
//   jobseekerId Int
//   jobSeeker   JobSeeker @relation(fields: [jobseekerId], references: [id])
//   vacancyId   Int
//   vacancy     Vacancy   @relation(fields: [vacancyId], references: [id])

//   @@map("Favorite_vacansies")
//   @@id([jobseekerId, vacancyId]) // они не уникальны, поэтому @@id, а не @@unique
// }




//------------- Профессии и отклики -------------
model Profession {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")
  name          String    @unique
  averageSalary Int       @map("average_salary")
  desc          String

  vacancy       Vacancy?

  resume        Resume?

  @@map("Professions")
}

// ЛОГИКА СВЯЗИ: на одну вакансию может откликнуться несколько соискателей, нескольким соискателям может понравиться одна вакансия(многие ко многим). Определили явно, так как есть дополнительное поле id(нужно оно или нет, пока хз)
model Responses {
  id        Int     @id @default(autoincrement()) @map("response_id")
  resumeId  Int
  resume    Resume  @relation(fields: [resumeId], references: [id])
  vacancyId Int
  vacancy   Vacancy @relation(fields: [vacancyId], references: [id])
}
